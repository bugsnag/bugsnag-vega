/**
 * This code was generated by the Kepler Codegen tool.
 *
 * It is provided as a starting template and can be modified.
 *
 * @generated by GenerateModuleCpp.js
 */

#include "BugsnagKeplerNative.h"
#include "utils/bsg_exception_handler.h"
#include "utils/bsg_signal_handler.h"

#include <chrono>
#include <filesystem>
#include <fstream>
#include <random>

#include <fcntl.h>
#include <string.h>
#include <unistd.h>

using namespace com::amazon::kepler::turbomodule;

namespace bugsnag {

static JSObject createStaticApp() {
  auto app = JSObject();

#if defined(__i386__)
  const char *binary_arch = "x86";
#elif defined(__x86_64__)
  const char *binary_arch = "x86_64";
#elif defined(__arm__)
  const char *binary_arch = "arm32";
#elif defined(__aarch64__)
  const char *binary_arch = "arm64";
#else
  const char *binary_arch = "unknown";
#endif
  app["binaryArch"] = std::string(binary_arch);

  return app;
}

template <typename T>
static T get_js_value(JSObject &js_object, std::string key, T default_value) {
  T result = js_object.find(key) != js_object.end()
                 ? std::get<T>(js_object[key])
                 : default_value;

  return result;
}

BugsnagKeplerNative::BugsnagKeplerNative() {
  this->device_id = this->generateUUID();
}

BugsnagKeplerNative::~BugsnagKeplerNative() noexcept {};

JSObject BugsnagKeplerNative::configure(JSObject configuration) {
  auto bsg_config = std::make_unique<Configuration>();

  std::string api_key = get_js_value<std::string>(configuration, "apikey", "");
  bsg_config->api_key = api_key;

  std::string persistence_dir = get_js_value<std::string>(
      configuration, "persistenceDirectory", "/data/bugsnag");
  bsg_config->storage_dir = persistence_dir + "/errors";

  if (bsg_config->max_breadcrumbs > BUGSNAG_CRUMBS_MAX) {
    bsg_config->max_breadcrumbs = BUGSNAG_CRUMBS_MAX;
  }

  this->bugsnag = new Client(std::move(bsg_config));
  global_client = this->bugsnag;
  this->bugsnag->set_device_id(this->device_id);

  auto enabled_errors =
      get_js_value<JSObject>(configuration, "enabledErrorTypes", JSObject());
  auto enabled_native_error =
      get_js_value<bool>(enabled_errors, "nativeCrashes", true);

  if (enabled_native_error) {
    bsg_install_signal_handlers();
    bsg_install_terminate_handlers();
  }

  auto result = JSObject();
  result["app"] = createStaticApp();

  return result;
}

void BugsnagKeplerNative::markLaunchCompleted() {
  if (this->bugsnag != nullptr) {
    this->bugsnag->mark_launch_completed();
  }
}

std::string BugsnagKeplerNative::getDeviceID() { return this->device_id; }

void BugsnagKeplerNative::setDeviceID(std::string id) {
  this->device_id = id;
  if (this->bugsnag == nullptr) {
    return;
  }
  this->bugsnag->set_device_id(id);
}

std::string BugsnagKeplerNative::generateUUID() {
  std::random_device rng;
  const char *available_chars = "0123456789abcdef";
  std::uniform_int_distribution<int> dist(0, 15);
  char uuid_buffer[37];

  for (int i = 0; i < 36; ++i) {
    uuid_buffer[i] = available_chars[dist(rng)];
  }
  uuid_buffer[8] = '-';
  uuid_buffer[13] = '-';
  uuid_buffer[18] = '-';
  uuid_buffer[23] = '-';
  uuid_buffer[36] = '\0';
  return std::string(uuid_buffer);
}

void BugsnagKeplerNative::leaveBreadcrumb(JSObject crumb) {
  if (this->bugsnag == nullptr) {
    return;
  }

  auto type = get_js_value<double>(crumb, "type", 0);
  bsg_breadcrumb_type casted_type = static_cast<bsg_breadcrumb_type>(type);

  auto msg = get_js_value<std::string>(crumb, "message", "");
  auto metadata = get_js_value<std::string>(crumb, "metadata", "");

  auto time_now = std::chrono::system_clock::now();
  time_t timestamp = std::chrono::system_clock::to_time_t(time_now);
  auto crumb_time = get_js_value<double>(crumb, "timestamp", 0);
  if (crumb_time != 0) {
    timestamp = static_cast<time_t>(crumb_time);
  }

  this->bugsnag->leave_breadcrumb(casted_type, msg, metadata, timestamp);
}

void BugsnagKeplerNative::setMetadata(std::string metadataStr) {
  if (this->bugsnag == nullptr) {
    return;
  }

  this->bugsnag->set_metadata(metadataStr);
}

void BugsnagKeplerNative::clearMetadata() {
  if (this->bugsnag == nullptr) {
    return;
  }
  this->bugsnag->clear_metadata();
}

void BugsnagKeplerNative::setFeatures(std::string featuresStr) {
  if (this->bugsnag == nullptr) {
    return;
  }

  this->bugsnag->set_features(featuresStr);
}

void BugsnagKeplerNative::clearFeatures() {
  if (this->bugsnag == nullptr) {
    return;
  }
  this->bugsnag->clear_features();
}

void BugsnagKeplerNative::setUser(JSObject userInfo) {
  if (this->bugsnag == nullptr) {
    return;
  }

  auto id = get_js_value<std::string>(userInfo, "id", "");
  auto email = get_js_value<std::string>(userInfo, "email", "");
  auto name = get_js_value<std::string>(userInfo, "name", "");
  this->bugsnag->set_user_data(id, email, name);
}

void BugsnagKeplerNative::clearUser() {
  if (this->bugsnag == nullptr) {
    return;
  }
  this->bugsnag->clear_user_data();
}

void BugsnagKeplerNative::setApp(JSObject appInfo) {
  if (this->bugsnag == nullptr) {
    return;
  }

  std::string id = get_js_value<std::string>(appInfo, "id", "");
  std::string stage = get_js_value<std::string>(appInfo, "releaseStage", "");
  std::string type = get_js_value<std::string>(appInfo, "type", "");
  std::string ver = get_js_value<std::string>(appInfo, "version", "");
  std::string binary_arch =
      get_js_value<std::string>(appInfo, "binaryArch", "");

  this->bugsnag->set_app_data(id, stage, type, ver, binary_arch);
}

void BugsnagKeplerNative::setDevice(JSObject deviceInfo) {
  if (this->bugsnag == nullptr) {
    return;
  }

  auto manufacturer = get_js_value<std::string>(deviceInfo, "manufacturer", "");
  auto model = get_js_value<std::string>(deviceInfo, "model", "");
  auto os_name = get_js_value<std::string>(deviceInfo, "osName", "");
  auto os_version = get_js_value<std::string>(deviceInfo, "osVersion", "");

  auto runtime_versions =
      get_js_value<JSObject>(deviceInfo, "runtimeVersions", JSObject());
  auto rn_version =
      get_js_value<std::string>(runtime_versions, "reactNative", "");
  auto js_engine =
      get_js_value<std::string>(runtime_versions, "reactNativeJsEngine", "");

  this->bugsnag->set_device_data(manufacturer, model, os_name, os_version,
                                 rn_version, js_engine);
}

void BugsnagKeplerNative::nativeCrash() { return; }

} // namespace bugsnag
